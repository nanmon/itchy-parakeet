/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package unison.lcc.eventoacademico.registro.gui;

import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import unison.lcc.eventoacademico.registro.evento.EscuchadorAccion;
import unison.lcc.eventoacademico.registro.evento.EscuchadorMenu;
import unison.lcc.eventoacademico.registro.io.*;
import unison.lcc.eventoacademico.registro.persona.Asistente;


/**
 *
 * @author Roberto Monta√±o
 */
public class RegistroAsistenteGUI extends javax.swing.JFrame {
    
    private String archivo;
    private EscritorBinario eb;
    private LectorBinario lb;
    private ArrayList asistentes;
    private EscuchadorAccion ea;

    /**
     * Creates new form RegistroAsistenteGUI
     */
    public RegistroAsistenteGUI() {
        archivo = "asistentes.bin";
        this.setTitle("Registro de Asistentes ["+archivo+"]");
        Binarios();
        initComponents();
        actualizarLista();
        jbNuevo.addActionListener(null);
        ea = new EscuchadorAccion(this);
        jbNuevo.addActionListener(ea);
        jbActualizar.addActionListener(ea);
        
        EscuchadorMenu em = new EscuchadorMenu(this);
        jmiLeer.addActionListener(em);
        jmiSalir.addActionListener(em);
        
        jList.addListSelectionListener(new ListSelectionListener(){

            @Override
            public void valueChanged(ListSelectionEvent lse) {
                cambiarSeleccion();
            }
            
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList = new javax.swing.JList();
        jbActualizar = new javax.swing.JButton();
        jbNuevo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jtfNombre = new javax.swing.JTextField();
        jtfApellido = new javax.swing.JTextField();
        jtfCurp = new javax.swing.JTextField();
        jMenuBar = new javax.swing.JMenuBar();
        jmArchivo = new javax.swing.JMenu();
        jmiLeer = new javax.swing.JMenuItem();
        jmiSalir = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(jList);

        jbActualizar.setText("Actualizar");

        jbNuevo.setText("Nuevo");

        jLabel1.setText("Nombre");

        jLabel2.setText("Apellidos");

        jLabel3.setText("CURP");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtfApellido, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(jtfNombre, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jtfCurp)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jbNuevo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 114, Short.MAX_VALUE)
                        .addComponent(jbActualizar)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jtfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jtfApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jtfCurp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbActualizar)
                            .addComponent(jbNuevo)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE))
                .addContainerGap())
        );

        jmArchivo.setText("Archivo");

        jmiLeer.setText("Leer Archivo");
        jmArchivo.add(jmiLeer);

        jmiSalir.setText("Salir");
        jmArchivo.add(jmiSalir);

        jMenuBar.add(jmArchivo);

        jMenu2.setText("Edit");
        jMenuBar.add(jMenu2);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void nuevoAsistente(){
        if(jtfNombre.getText().length()==0) return;
        if(jtfApellido.getText().length()==0) return;
        if(jtfCurp.getText().length()==0) return;
        for(int i=0; i<asistentes.size(); ++i){
            if(((Asistente)asistentes.get(i)).getCurp().equals(jtfCurp.getText())){
                return;
            }
        }
        asistentes.add(new Asistente(jtfNombre.getText(), jtfApellido.getText(), jtfCurp.getText()));
        actualizarLista();
        jList.setSelectedIndex(asistentes.size()-1);
        try {        
            eb.reset();
            eb.writeObject(asistentes);
        } catch (IOException ex) {
            Logger.getLogger(RegistroAsistenteGUI.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("la memoria no se pudo write");
        }
    }
    
    public void actualizarAsistente(){
        int i=jList.getSelectedIndex();
        if(jtfNombre.getText().length()==0) return;
        if(jtfApellido.getText().length()==0) return;
        if(jtfCurp.getText().length()==0) return;
        for(int j=0; j<asistentes.size()-1; ++j){
            if(((Asistente)asistentes.get(j>=i?j+1:j)).getCurp().equals(jtfCurp.getText())){
                return;
            }
        }
        asistentes.remove(i);
        asistentes.add(i, new Asistente(jtfNombre.getText(), jtfApellido.getText(), jtfCurp.getText()));
        actualizarLista();
        jList.setSelectedIndex(i);
        try {        
            eb.reset();
            eb.writeObject(asistentes);
        } catch (IOException ex) {
            Logger.getLogger(RegistroAsistenteGUI.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("la memoria no se pudo write");
        }
    }

    public void cambiarSeleccion(){
        int i=jList.getSelectedIndex();
        if(i==-1) return;
        jtfNombre.setText(((Asistente)asistentes.get(i)).getNombre());
        jtfApellido.setText(((Asistente)asistentes.get(i)).getApellido());
        jtfCurp.setText(((Asistente)asistentes.get(i)).getCurp());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jList;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbActualizar;
    private javax.swing.JButton jbNuevo;
    private javax.swing.JMenu jmArchivo;
    private javax.swing.JMenuItem jmiLeer;
    private javax.swing.JMenuItem jmiSalir;
    private javax.swing.JTextField jtfApellido;
    private javax.swing.JTextField jtfCurp;
    private javax.swing.JTextField jtfNombre;
    // End of variables declaration//GEN-END:variables

    private void actualizarLista() {
        String nombres[] = new String[asistentes.size()];
        for(int i=0; i<asistentes.size(); ++i) 
            nombres[i] = ((Asistente)asistentes.get(i)).obtenerNombreCompleto();
        jList.setListData(nombres);
    }

    public void cambiarArchivo() {
        JFileChooser jfc = new JFileChooser(new File(archivo));
        if(jfc.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            archivo = jfc.getSelectedFile().getPath();
            this.setTitle("Registro de Asistentes ["+jfc.getSelectedFile().getName()+"]");
            Binarios();
            actualizarLista();
            if(asistentes.size()>0){
                jList.setSelectedIndex(0);
            }else{
                jtfNombre.setText("");
                jtfApellido.setText("");
                jtfCurp.setText("");
            }
        }
    }
    
    private void Binarios(){
        try {
            lb = new LectorBinario(archivo);
            asistentes = (ArrayList) lb.readObject();
            eb = new EscritorBinario(archivo);
            eb.writeObject(asistentes);
        }catch (EOFException|FileNotFoundException ex) {
            asistentes = new ArrayList();
            try {
                eb = new EscritorBinario(archivo);
            } catch (IOException ex1) {
                Logger.getLogger(RegistroAsistenteGUI.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }catch (Exception ex) {
            Logger.getLogger(RegistroAsistenteGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
